#!/usr/bin/env python3

"""
Fractal generator using WASM
"""

from sys import argv, exit
from wasmtime import instantiate
import tkinter
from tkinter.ttk import Progressbar
from PIL import Image, ImageTk
from time import sleep, time
from threading import Thread
from queue import Queue

class Theme:
    """
    A particular theme for the fractal to be rendered
    """

    def __init__(self, path):
        wasm_bytes = open(path, 'rb').read()
        result = instantiate(wasm_bytes, {})
        self._instance = result.instance

    def color_pixel(self, steps, x, y):
        """
        Produce the pixel color in 24-bit BGR format for the given
        number of steps at the given location.
        """
        return self._instance.exports['color_pixel'](steps, x, y)

    @property
    def max_steps(self):
        """
        The maximum number of steps to render for the theme.
        """
        return self._instance.exports['max_steps']()


class Fractal:
    """
    Implementation of a fractal generator
    """

    def render(self, x, y, zoom):
        """
        Render the fractal at the given position and zoom level.
        """
        pass


class Canvas:

    def __init__(self):
        self._progress = 0
        self._window = tkinter.Tk()
        self._canvas = tkinter.Canvas(self._window)
        self._canvas.pack(fill="both", expand=True)
        self._image = Image.new("RGB", (self.width, self.height))
        self._photo = ImageTk.PhotoImage(self._image)
        self._img_area = self._canvas.create_image(
            0, 0,
            image=self._photo,
            anchor="nw",
        )
        self._progress = Progressbar(self._window)
        self._progress.pack(fill="x", side="bottom")
        self.bind("c", lambda e: self._clear())
        self.bind("q", lambda e: self._window.quit())
        self.bind("s", lambda e: self._image.show())
        self.after(self._clear)

    @property
    def width(self):
        "The maximum width of the canvas"
        geometry = self._window.winfo_geometry()
        size, _, _ = geometry.split("+")
        x, _ = size.split("x")
        return int(x)

    @property
    def height(self):
        "The maximum height of the canvas"
        geometry = self._window.winfo_geometry()
        size, _, _ = geometry.split("+")
        _, y = size.split("x")
        return int(y)

    def draw(self, x, y, color):
        "Set the pixel at (x, y) to the provided BGR color"
        color = Canvas._convert_color(color)
        self._image.putpixel((x, y), color)

    def refresh(self):
        "Refresh the rendered image"
        self._photo = ImageTk.PhotoImage(self._image)
        self._canvas.itemconfig(self._img_area, image=self._photo)

    def bind(self, sequence, func):
        self._window.bind(sequence, func)

    def mainloop(self):
        self._window.mainloop()

    def _clear(self):
        self._image = Image.new("RGB", (self.width, self.height))
        self._photo = ImageTk.PhotoImage(self._image)
        self._canvas.itemconfig(self._img_area, image=self._photo)

    def show_progress(self, progress):
        self._progress['value'] = progress * 100.0

    def after(self, function):
        self._window.after(100, function)

    @staticmethod
    def _convert_color(color):
        red = color & 0xFF
        green = (color >> 8) & 0xFF
        blue = (color >> 16) & 0xFF
        return (red, green, blue, 0xFF)


class Mandelbrot(Fractal):
    """
    Native implementation of the Mandelbrot Set renderer.
    """

    def __init__(self, canvas, theme):
        self._canvas = canvas
        self._theme = theme

    def render(self, x, y, zoom):
        width = self._canvas.width
        height = self._canvas.height
        distance = 1 / (1 << zoom)
        max_steps = self._theme.max_steps

        for pixel_y in range(height):
            self._canvas.show_progress(pixel_y / height)
            for pixel_x in range(width):
                c = complex(
                    x + (pixel_x - (width/2)) * distance,
                    y + (pixel_y - (height/2)) * distance,
                )
                z = complex(0, 0)
                steps = 0
                while (z.real * z.real + z.imag * z.imag) < 4.0 and steps < max_steps:
                    z = z * z + c
                    steps += 1

                color = self._theme.color_pixel(steps, c.real, c.imag)
                self._canvas.draw(pixel_x, pixel_y, color)

        self._canvas.refresh()

class Wasm(Fractal):
    """
    Load a WASM module to generate fractals
    """

    def __init__(self, path, canvas, theme):
        self._canvas = canvas
        self._theme = theme

        wasm_bytes = open(path, 'rb').read()
        imports = Wasm._build_imports(canvas, theme)
        result = instantiate(wasm_bytes, imports)
        self._instance = result.instance

    @staticmethod
    def _build_imports(canvas, theme):
        def canvas_width() -> 'i32':
            return canvas.width

        def canvas_height() -> 'i32':
            return canvas.height

        def draw_pixel(x: 'i32', y: 'i32', color: 'i32'):
            canvas.draw(x, y, color)

        def color_pixel(steps: 'i32', x: 'f64', y: 'f64') -> 'i32':
            return theme.color_pixel(steps, x, y)

        def paint():
            canvas.refresh()

        def max_steps() -> 'i32':
            return theme.max_steps

        def progress(progress: 'f64'):
            canvas.show_progress(progress)

        return {
            'env': {
                'canvas_width': canvas_width,
                'canvas_height': canvas_height,
                'draw_pixel': draw_pixel,
                'color_pixel': color_pixel,
                'paint': paint,
                'max_steps': max_steps,
                'progress': progress,
            }
        }

    def render(self, x, y, zoom):
        self._instance.exports['render'](x, y, zoom)

def bench(name, action):
    start = time()
    action()
    end = time()
    duration = end - start
    print(f"{name}: {duration:.6f} seconds")

class RenderThread(Thread):

    def __init__(self, canvas):
        super().__init__()
        self._render_queue = Queue()
        self._ui_queue = Queue()
        self._canvas = canvas
        self._live = True
        self._theme = None
        self._wasm = None

    def run(self):
        while (self._live):
            self._render_event(self._render_queue.get())

    def _render_event(self, message):
        if message["type"] == "wasm":
            self._wasm = message["wasm"]
        elif message["type"] == "theme":
            self._theme = message["theme"]
        elif message["type"] == "render_native":
            native = Mandelbrot(self._canvas, self._theme)
            del message["type"]
            bench(
                'Native Mandelbrot Set',
                lambda: native.render(**message),
            )
        elif message["type"] == "render_wasm":
            del message["type"]
            bench(
                'WASM Mandelbrot Set',
                lambda: self._wasm.render(**message),
            )
        elif message["type"] == "quit":
            self._live = False

    def handle_ui_events(self):
        while not self._ui_queue.empty():
            self._ui_event(self._ui_queue.get_nowait())
        self._canvas.after(self.handle_ui_events)

    def _ui_event(message):
        if message["type"] == "progress":
            self._canvas.show_progress(message["progress"])
        elif message["type"] == "paint":
            self._canvas.refresh()

    def set_wasm(self, wasm_file):
        self._render_queue.put({
            "type": "wasm",
            "wasm": wasm_file,
        })

    def set_theme(self, theme_file):
        self._render_queue.put({
            "type": "theme",
            "theme": theme_file,
        })

    def render_native(self, x, y, zoom):
        self._render_queue.put({
            "type": "render_native",
            "x": x,
            "y": y,
            "zoom": zoom,
        })

    def render_wasm(self, x, y, zoom):
        self._render_queue.put({
            "type": "render_wasm",
            "x": x,
            "y": y,
            "zoom": zoom,
        })

    def quit(self):
        self._render_queue.put({ "type": "quit" })

if __name__ == "__main__":
    if len(argv) != 6:
        print(f"Usage: {argv[0]} <theme.wasm> <mandelbrot.wasm> <x> <y> <zoom>")
        exit(1)

    theme = Theme(argv[1])
    wasm_path = argv[2]
    x = float(argv[3])
    y = float(argv[4])
    zoom = int(argv[5])

    canvas = Canvas()
    render_thread = RenderThread(canvas)
    render_thread.set_theme(theme)
    render_thread.set_wasm(Wasm(wasm_path, canvas, theme))
    render_thread.start()
    render_thread.handle_ui_events()

    canvas.bind('n', lambda _: render_thread.render_native(x, y, zoom))
    canvas.bind('w', lambda _: render_thread.render_wasm(x, y, zoom))

    canvas.mainloop()
    render_thread.quit()
